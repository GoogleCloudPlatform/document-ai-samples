# Copyright 2023 Google LLC
# SPDX-License-Identifier: Apache-2.0

main:
  # Process document processing result.
  #
  # Args:
  #     inputBucket: The bucket where the input document object is stored in.
  #     inputObject: The name of the input document object.
  #     resultBucket: The bucket where the processing results are stored.
  #     resultPrefix: The prefix where the processing results are stored.
  #     processor: Map of processor information containing at least name and type. See https://cloud.google.com/workflows/docs/reference/googleapis/documentai/v1/Overview#GoogleCloudDocumentaiV1Processor
  #     processors: Map containing processor display name mapped to full processor details inclduing processor name
  #       type: (Required) The type of processor.
  #       displayName: (Required) The display name. Must be unique.
  #       id: an identifier for the resource with format projects/{{project}}/locations/{{location}}/processors/{{name}}
  #     workflows: Map containing workflow display name to full workflow name mappings with these mandatory workflows:
  #     config: custom configuration for processors
  #     
  #
  params: [args]
  steps:
    - get_parse_results_cloud_function:
        call: http.get
        args:
          auth:
            type: OAuth2 
          url: ${"https://cloudfunctions.googleapis.com/v2/projects/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/locations/" + sys.get_env("GOOGLE_CLOUD_LOCATION") + "/functions/parse-results"}
        result: parseResultsCloudFunction
    - invoke_parse_results_cloud_function:
        try:
          call: http.post
          args:
            url: ${parseResultsCloudFunction.body.serviceConfig.uri}
            timeout: 1800
            auth:
              type: OIDC
            body:
              processor: ${args.processor}
              inputBucket: ${args.inputBucket}
              inputObject: ${args.inputObject}
              resultBucket: ${args.resultBucket}
              resultPrefix: ${args.resultPrefix}              
          result: parseResultsCloudFunctionResult
        retry: ${http.default_retry}           
    - copy_document_to_result_bucket:
        try:
          call: googleapis.storage.v1.objects.rewrite
          args:
            sourceBucket: ${args.inputBucket}
            sourceObject: ${text.url_encode(args.inputObject)}
            destinationBucket: ${args.resultBucket}
            destinationObject: ${text.url_encode(args.resultPrefix + "/" + args.inputObject)}
        retry: ${http.default_retry_non_idempotent}
        except:
          as: e
          steps:
            - log_exception_copy_document_to_result_bucket:
                call: sys.log
                args:
                  severity: "ERROR"
                  data: ${e}
    # remove document from the process bucket
    - remove_document_from_process_bucket:
        try:
          call: googleapis.storage.v1.objects.delete
          args:
            bucket: ${args.inputBucket}
            object: ${text.url_encode(args.inputObject)}
        retry: ${http.default_retry_non_idempotent}
        except:
          as: e
          steps:
            - log_exception_remove_document_from_process_bucket:
                call: sys.log
                args:
                  severity: "ERROR"
                  data: ${e}
    - check_processor_type:
        switch:
          - condition: ${text.match_regex(args.processor.type,"_SPLIT")}
            steps:
              - get_split_document_cloud_function:
                  call: http.get
                  args:
                    auth:
                      type: OAuth2 
                    url: ${"https://cloudfunctions.googleapis.com/v2/projects/" + sys.get_env("GOOGLE_CLOUD_PROJECT_ID") + "/locations/" + sys.get_env("GOOGLE_CLOUD_LOCATION") + "/functions/split-document"}
                  result: splitDocumentCloudFunction
              - invoke_split_document_cloud_function:
                  try:
                    call: http.post
                    args:
                      url: ${splitDocumentCloudFunction.body.serviceConfig.uri}
                      timeout: 600
                      auth:
                        type: OIDC
                      body:
                        inputObject: ${args.resultPrefix + "/" + args.inputObject}
                        resultBucket: ${args.resultBucket}
                        resultPrefix: ${args.resultPrefix}    
                        resultObject: ${callbackResult.http_request.body.resultObject}          
                    result: splitDocumentCloudFunctionResult
                  retry: ${http.default_retry} 
              - iterate_splitted_documents:
                  for:
                    value: classification
                    in: ${splitDocumentCloudFunctionResult.body.classifications}
                    steps:
                      - get_processor_name:
                          assign:
                            - emptyMap: {}
                            - processorName: ${default(map.get(default(map.get(args.processors,classification.type),emptyMap),"id"),"none")}
                      - import_document_into_splitting_processor_dataset:
                          try:
                            call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                            args:
                              project_id: ${text.split(args.workflows["datasetImportDocument"],"/")[1]}
                              location: ${text.split(args.workflows["datasetImportDocument"],"/")[3]}
                              workflow_id: ${text.split(args.workflows["datasetImportDocument"],"/")[5]}
                              argument:
                                processor: ${args.processor}
                                documentBucket: ${args.resultBucket}
                                documentObject: ${classification.objectName}
                                label: ${classification.type}
                                numPages: ${classification.pages}
                              connector_params:
                                skip_polling: True
                          retry: ${http.default_retry_non_idempotent}
                          except:
                            as: e
                            steps:
                              - log_exception_import_document_into_splitting_processor_dataset:
                                  call: sys.log
                                  args:
                                    severity: "ERROR"
                                    data: ${e}
                      - skip_document_if_no_processor_name_found:
                          switch:
                            - condition: ${processorName == "none"}
                              next: continue
                      - set_processor_type_on_object:
                          try:
                            call: googleapis.storage.v1.objects.patch
                            args:
                              bucket: ${args.resultBucket}
                              object: ${text.url_encode(classification.objectName)}
                              body: 
                                metadata: 
                                  processorName: ${processorName}
                          retry: ${http.default_retry_non_idempotent}
                          except:
                            as: e
                            steps:
                              - log_exception_set_processor_type_on_object:
                                  call: sys.log
                                  args:
                                    severity: "ERROR"
                                    data: ${e}
                      - copy_splitted_document_to_input_bucket:
                          try:
                            call: googleapis.storage.v1.objects.rewrite
                            args:
                              sourceBucket: ${args.resultBucket}
                              sourceObject: ${text.url_encode(classification.objectName)}
                              destinationBucket: ${args.config.uploadBucket}
                              destinationObject: ${text.url_encode(classification.fileName)}
                              body:
                                metadata:
                                  processorDisplayName: ${classification.type}
                                contentType: "application/pdf"
                          retry: ${http.default_retry_non_idempotent}
                          except:
                            as: e
                            steps:
                              - log_exception_copy_document_to_input_bucket:
                                  call: sys.log
                                  args:
                                    severity: "ERROR"
                                    data: ${e}
                                  next: continue
          - condition: true # TODO: trigger_dataset_import_document for entity extraction
            next: end